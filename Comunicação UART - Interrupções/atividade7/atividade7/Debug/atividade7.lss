
atividade7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000428  000004bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080021c  0080021c  000005d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000add  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072c  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040d  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046f  00000000  00000000  00001d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  000021e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000235a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 33       	cpi	r26, 0x33	; 51
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 27 01 	call	0x24e	; 0x24e <main>
  9e:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
char msg7[] = "Comando: Acender LED - cor branca\n";
char msg8[] = "Comando incorreto\n";
char msg9[] = "Vazio!\n";

/*Interrupção RX para colocar UDR0 no buffer*/			
ISR(USART_RX_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
		
	c = UDR0;
  c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <c>
	
	if((escrever + 1)%11 != apagar){
  ce:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <escrever>
  d2:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <escrever+0x1>
  d6:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <apagar>
  da:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <apagar+0x1>
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	6b e0       	ldi	r22, 0x0B	; 11
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <__divmodhi4>
  e8:	82 17       	cp	r24, r18
  ea:	93 07       	cpc	r25, r19
  ec:	11 f1       	breq	.+68     	; 0x132 <__vector_18+0x8c>
		buffer[escrever] = c;
  ee:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <escrever>
  f2:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <escrever+0x1>
  f6:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <c>
  fa:	e9 5d       	subi	r30, 0xD9	; 217
  fc:	fd 4f       	sbci	r31, 0xFD	; 253
  fe:	80 83       	st	Z, r24
		escrever++;
 100:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <escrever>
 104:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <escrever+0x1>
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <escrever+0x1>
 10e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <escrever>
		if(escrever == 11 && apagar != 0){
 112:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <escrever>
 116:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <escrever+0x1>
 11a:	0b 97       	sbiw	r24, 0x0b	; 11
 11c:	51 f4       	brne	.+20     	; 0x132 <__vector_18+0x8c>
 11e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <apagar>
 122:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <apagar+0x1>
 126:	89 2b       	or	r24, r25
 128:	21 f0       	breq	.+8      	; 0x132 <__vector_18+0x8c>
			escrever = 0;
 12a:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <escrever+0x1>
 12e:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <escrever>
		}
	}
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_20>:

/*Interrupção TX para informar para a função de transmissão se os caracteres da msg foram enviados*/
ISR(USART_TX_vect){
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
	transmitido = 1;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__data_end+0x1>
 168:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
}
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <transmitir_msg>:

/*Transmissão da Mensagem*/
void transmitir_msg(char msg[]){
 17a:	ac 01       	movw	r20, r24
	i = 0;
 17c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <i+0x1>
 180:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <i>
	UDR0 = msg[i];
 184:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <i>
 188:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <i+0x1>
 18c:	e8 0f       	add	r30, r24
 18e:	f9 1f       	adc	r31, r25
 190:	80 81       	ld	r24, Z
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	/*Só terminar a transmissão da mensagem quando enviar todos os caracteres*/
	while(msg[i]){
		/*Só passar para o prossimo caractere da mensagem quando a varialvel transmitido foi igual a 1, que acontece qnd acontece uma interrupção em Tx*/
		if(transmitido == 1){
			i++;
			UDR0 = msg[i];
 196:	a6 ec       	ldi	r26, 0xC6	; 198
 198:	b0 e0       	ldi	r27, 0x00	; 0
/*Transmissão da Mensagem*/
void transmitir_msg(char msg[]){
	i = 0;
	UDR0 = msg[i];
	/*Só terminar a transmissão da mensagem quando enviar todos os caracteres*/
	while(msg[i]){
 19a:	1c c0       	rjmp	.+56     	; 0x1d4 <transmitir_msg+0x5a>
		/*Só passar para o prossimo caractere da mensagem quando a varialvel transmitido foi igual a 1, que acontece qnd acontece uma interrupção em Tx*/
		if(transmitido == 1){
 19c:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__data_end>
 1a0:	30 91 1d 02 	lds	r19, 0x021D	; 0x80021d <__data_end+0x1>
 1a4:	21 30       	cpi	r18, 0x01	; 1
 1a6:	31 05       	cpc	r19, r1
 1a8:	a9 f4       	brne	.+42     	; 0x1d4 <transmitir_msg+0x5a>
			i++;
 1aa:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <i>
 1ae:	90 91 26 02 	lds	r25, 0x0226	; 0x800226 <i+0x1>
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 26 02 	sts	0x0226, r25	; 0x800226 <i+0x1>
 1b8:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <i>
			UDR0 = msg[i];
 1bc:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <i>
 1c0:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <i+0x1>
 1c4:	e4 0f       	add	r30, r20
 1c6:	f5 1f       	adc	r31, r21
 1c8:	80 81       	ld	r24, Z
 1ca:	8c 93       	st	X, r24
			transmitido = 0;
 1cc:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__data_end+0x1>
 1d0:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
/*Transmissão da Mensagem*/
void transmitir_msg(char msg[]){
	i = 0;
	UDR0 = msg[i];
	/*Só terminar a transmissão da mensagem quando enviar todos os caracteres*/
	while(msg[i]){
 1d4:	e0 91 25 02 	lds	r30, 0x0225	; 0x800225 <i>
 1d8:	f0 91 26 02 	lds	r31, 0x0226	; 0x800226 <i+0x1>
 1dc:	e4 0f       	add	r30, r20
 1de:	f5 1f       	adc	r31, r21
 1e0:	90 81       	ld	r25, Z
 1e2:	91 11       	cpse	r25, r1
 1e4:	db cf       	rjmp	.-74     	; 0x19c <transmitir_msg+0x22>
			i++;
			UDR0 = msg[i];
			transmitido = 0;
		}
	}
}
 1e6:	08 95       	ret

000001e8 <configurar_uart>:

/*Configuração da UART*/
void configurar_uart(){

	UBRR0H = 0;
 1e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = 103; /*BAUD configurado para enviar 9,6k bits/s*/
 1ec:	87 e6       	ldi	r24, 0x67	; 103
 1ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0A = 0x00; /*Zerar todas as flags de estado e velocidade de transmissão normal*/
 1f2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
	UCSR0B = 0xD8 /*0b11011000*/;/*Habilitar transmissão e recepção de dados*/
 1f6:	88 ed       	ldi	r24, 0xD8	; 216
 1f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = 0x0E /*0b00001110*/;/*Modo de operação Assíncrono; sem bit de paridade; 2 bit de parada; transmissão de 8 bits por frame*/
 1fc:	8e e0       	ldi	r24, 0x0E	; 14
 1fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 202:	08 95       	ret

00000204 <retirar_buffer>:
}

/*Remover Elementos do Buffer*/
void retirar_buffer(){
		if(apagar != escrever){
 204:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <apagar>
 208:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <apagar+0x1>
 20c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <escrever>
 210:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <escrever+0x1>
 214:	28 17       	cp	r18, r24
 216:	39 07       	cpc	r19, r25
 218:	c9 f0       	breq	.+50     	; 0x24c <retirar_buffer+0x48>
			apagar++;
 21a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <apagar>
 21e:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <apagar+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <apagar+0x1>
 228:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <apagar>
			if(apagar == 11 && escrever != 11){
 22c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <apagar>
 230:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <apagar+0x1>
 234:	0b 97       	sbiw	r24, 0x0b	; 11
 236:	51 f4       	brne	.+20     	; 0x24c <retirar_buffer+0x48>
 238:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <escrever>
 23c:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <escrever+0x1>
 240:	0b 97       	sbiw	r24, 0x0b	; 11
 242:	21 f0       	breq	.+8      	; 0x24c <retirar_buffer+0x48>
				apagar = 0;
 244:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <apagar+0x1>
 248:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <apagar>
 24c:	08 95       	ret

0000024e <main>:


int main(void){
	
	/*configurar saída de 0-2 do portb como saída*/
	*pt_ddrb = 0x07;
 24e:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <pt_ddrb>
 252:	f0 91 1b 02 	lds	r31, 0x021B	; 0x80021b <pt_ddrb+0x1>
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	80 83       	st	Z, r24
	
	configurar_uart();
 25a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <configurar_uart>
	/*habilitar todas as interrupções*/
	sei();
 25e:	78 94       	sei
				*pt_portb = cores[7];
				transmitir_msg(msg7);
			}
			/*Comando incorreto*/
			else{
				*pt_portb = cores[0];
 260:	c0 e1       	ldi	r28, 0x10	; 16
 262:	d2 e0       	ldi	r29, 0x02	; 2
	sei();
	
	while (1){
			
			/*retirar elementos do buffer*/
			retirar_buffer();
 264:	0e 94 02 01 	call	0x204	; 0x204 <retirar_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	83 ec       	ldi	r24, 0xC3	; 195
 26c:	99 e0       	ldi	r25, 0x09	; 9
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x20>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x2a>
 278:	00 00       	nop
			
			
			_delay_ms(200);
			
			/*Buffer Vazio*/
			if(escrever == apagar){
 27a:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <escrever>
 27e:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <escrever+0x1>
 282:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <apagar>
 286:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <apagar+0x1>
 28a:	28 17       	cp	r18, r24
 28c:	39 07       	cpc	r19, r25
 28e:	59 f4       	brne	.+22     	; 0x2a6 <main+0x58>
				transmitir_msg(msg9);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
				*pt_portb = cores[0];
 298:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 29c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 2a0:	88 81       	ld	r24, Y
 2a2:	80 83       	st	Z, r24
 2a4:	df cf       	rjmp	.-66     	; 0x264 <main+0x16>
			}
			/*Vermelho*/
			else if(buffer[apagar] == 'r'){
 2a6:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 2aa:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 2ae:	e9 5d       	subi	r30, 0xD9	; 217
 2b0:	fd 4f       	sbci	r31, 0xFD	; 253
 2b2:	80 81       	ld	r24, Z
 2b4:	82 37       	cpi	r24, 0x72	; 114
 2b6:	59 f4       	brne	.+22     	; 0x2ce <main+0x80>
				*pt_portb = cores[1];
 2b8:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 2bc:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	80 83       	st	Z, r24
				transmitir_msg(msg1);
 2c4:	8b ee       	ldi	r24, 0xEB	; 235
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 2cc:	cb cf       	rjmp	.-106    	; 0x264 <main+0x16>
			}
			/*Verde*/
			else if(buffer[apagar] == 'g'){
 2ce:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 2d2:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 2d6:	e9 5d       	subi	r30, 0xD9	; 217
 2d8:	fd 4f       	sbci	r31, 0xFD	; 253
 2da:	80 81       	ld	r24, Z
 2dc:	87 36       	cpi	r24, 0x67	; 103
 2de:	59 f4       	brne	.+22     	; 0x2f6 <main+0xa8>
				*pt_portb = cores[2];
 2e0:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 2e4:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	80 83       	st	Z, r24
				transmitir_msg(msg2);
 2ec:	89 ec       	ldi	r24, 0xC9	; 201
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 2f4:	b7 cf       	rjmp	.-146    	; 0x264 <main+0x16>
			}
			/*Azul*/
			else if(buffer[apagar] == 'b'){
 2f6:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 2fa:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 2fe:	e9 5d       	subi	r30, 0xD9	; 217
 300:	fd 4f       	sbci	r31, 0xFD	; 253
 302:	80 81       	ld	r24, Z
 304:	82 36       	cpi	r24, 0x62	; 98
 306:	59 f4       	brne	.+22     	; 0x31e <main+0xd0>
				*pt_portb = cores[3];
 308:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 30c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	80 83       	st	Z, r24
				transmitir_msg(msg3);
 314:	88 ea       	ldi	r24, 0xA8	; 168
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 31c:	a3 cf       	rjmp	.-186    	; 0x264 <main+0x16>
			}
			/*Amarelo*/
			else if(buffer[apagar] == 'y'){
 31e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 322:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 326:	e9 5d       	subi	r30, 0xD9	; 217
 328:	fd 4f       	sbci	r31, 0xFD	; 253
 32a:	80 81       	ld	r24, Z
 32c:	89 37       	cpi	r24, 0x79	; 121
 32e:	59 f4       	brne	.+22     	; 0x346 <main+0xf8>
				*pt_portb = cores[4];
 330:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 334:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 338:	8c 81       	ldd	r24, Y+4	; 0x04
 33a:	80 83       	st	Z, r24
				transmitir_msg(msg4);
 33c:	84 e8       	ldi	r24, 0x84	; 132
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 344:	8f cf       	rjmp	.-226    	; 0x264 <main+0x16>
			}
			/*Ciano*/
			else if(buffer[apagar] == 'c'){
 346:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 34a:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 34e:	e9 5d       	subi	r30, 0xD9	; 217
 350:	fd 4f       	sbci	r31, 0xFD	; 253
 352:	80 81       	ld	r24, Z
 354:	83 36       	cpi	r24, 0x63	; 99
 356:	59 f4       	brne	.+22     	; 0x36e <main+0x120>
				*pt_portb = cores[5];
 358:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 35c:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 360:	8d 81       	ldd	r24, Y+5	; 0x05
 362:	80 83       	st	Z, r24
				transmitir_msg(msg5);
 364:	82 e6       	ldi	r24, 0x62	; 98
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 36c:	7b cf       	rjmp	.-266    	; 0x264 <main+0x16>
			}
			/*Magenta*/
			else if(buffer[apagar] == 'm'){
 36e:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 372:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 376:	e9 5d       	subi	r30, 0xD9	; 217
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	80 81       	ld	r24, Z
 37c:	8d 36       	cpi	r24, 0x6D	; 109
 37e:	59 f4       	brne	.+22     	; 0x396 <main+0x148>
				*pt_portb = cores[6];
 380:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 384:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 388:	8e 81       	ldd	r24, Y+6	; 0x06
 38a:	80 83       	st	Z, r24
				transmitir_msg(msg6);
 38c:	8e e3       	ldi	r24, 0x3E	; 62
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 394:	67 cf       	rjmp	.-306    	; 0x264 <main+0x16>
			}
			/*Branco*/
			else if(buffer[apagar] == 'w'){
 396:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <apagar>
 39a:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <apagar+0x1>
 39e:	e9 5d       	subi	r30, 0xD9	; 217
 3a0:	fd 4f       	sbci	r31, 0xFD	; 253
 3a2:	80 81       	ld	r24, Z
 3a4:	87 37       	cpi	r24, 0x77	; 119
 3a6:	59 f4       	brne	.+22     	; 0x3be <main+0x170>
				*pt_portb = cores[7];
 3a8:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 3ac:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 3b0:	8f 81       	ldd	r24, Y+7	; 0x07
 3b2:	80 83       	st	Z, r24
				transmitir_msg(msg7);
 3b4:	8b e1       	ldi	r24, 0x1B	; 27
 3b6:	91 e0       	ldi	r25, 0x01	; 1
 3b8:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 3bc:	53 cf       	rjmp	.-346    	; 0x264 <main+0x16>
			}
			/*Comando incorreto*/
			else{
				*pt_portb = cores[0];
 3be:	e0 91 18 02 	lds	r30, 0x0218	; 0x800218 <pt_portb>
 3c2:	f0 91 19 02 	lds	r31, 0x0219	; 0x800219 <pt_portb+0x1>
 3c6:	88 81       	ld	r24, Y
 3c8:	80 83       	st	Z, r24
				transmitir_msg(msg8);	
 3ca:	88 e0       	ldi	r24, 0x08	; 8
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 bd 00 	call	0x17a	; 0x17a <transmitir_msg>
 3d2:	48 cf       	rjmp	.-368    	; 0x264 <main+0x16>

000003d4 <__divmodhi4>:
 3d4:	97 fb       	bst	r25, 7
 3d6:	07 2e       	mov	r0, r23
 3d8:	16 f4       	brtc	.+4      	; 0x3de <__divmodhi4+0xa>
 3da:	00 94       	com	r0
 3dc:	07 d0       	rcall	.+14     	; 0x3ec <__divmodhi4_neg1>
 3de:	77 fd       	sbrc	r23, 7
 3e0:	09 d0       	rcall	.+18     	; 0x3f4 <__divmodhi4_neg2>
 3e2:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__udivmodhi4>
 3e6:	07 fc       	sbrc	r0, 7
 3e8:	05 d0       	rcall	.+10     	; 0x3f4 <__divmodhi4_neg2>
 3ea:	3e f4       	brtc	.+14     	; 0x3fa <__divmodhi4_exit>

000003ec <__divmodhi4_neg1>:
 3ec:	90 95       	com	r25
 3ee:	81 95       	neg	r24
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__divmodhi4_neg2>:
 3f4:	70 95       	com	r23
 3f6:	61 95       	neg	r22
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255

000003fa <__divmodhi4_exit>:
 3fa:	08 95       	ret

000003fc <__udivmodhi4>:
 3fc:	aa 1b       	sub	r26, r26
 3fe:	bb 1b       	sub	r27, r27
 400:	51 e1       	ldi	r21, 0x11	; 17
 402:	07 c0       	rjmp	.+14     	; 0x412 <__udivmodhi4_ep>

00000404 <__udivmodhi4_loop>:
 404:	aa 1f       	adc	r26, r26
 406:	bb 1f       	adc	r27, r27
 408:	a6 17       	cp	r26, r22
 40a:	b7 07       	cpc	r27, r23
 40c:	10 f0       	brcs	.+4      	; 0x412 <__udivmodhi4_ep>
 40e:	a6 1b       	sub	r26, r22
 410:	b7 0b       	sbc	r27, r23

00000412 <__udivmodhi4_ep>:
 412:	88 1f       	adc	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	5a 95       	dec	r21
 418:	a9 f7       	brne	.-22     	; 0x404 <__udivmodhi4_loop>
 41a:	80 95       	com	r24
 41c:	90 95       	com	r25
 41e:	bc 01       	movw	r22, r24
 420:	cd 01       	movw	r24, r26
 422:	08 95       	ret

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>

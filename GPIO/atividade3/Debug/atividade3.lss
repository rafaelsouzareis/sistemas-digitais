
atividade3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000803  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  00000aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029a  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000405  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011b  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ec       	ldi	r30, 0xCE	; 206
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
unsigned char *pt_ddrd = (unsigned char *) 0x2A;
unsigned char *pt_portd = (unsigned char *) 0x2B;
unsigned char *ucsr0b = 0xC1;

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2a 97       	sbiw	r28, 0x0a	; 10
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	/*Direção dos Registradores
	Habilitar todos os pinos de C como entrada
	Habilitar todos os pinos (exceto o primeiro) de C como saída*/
	*pt_ddrc = *pt_ddrc & 0x00;
  aa:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <pt_ddrc>
  ae:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <pt_ddrc+0x1>
  b2:	10 82       	st	Z, r1
	*pt_ddrd = *pt_ddrd | 0xFE;
  b4:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <pt_ddrd>
  b8:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <pt_ddrd+0x1>
  bc:	80 81       	ld	r24, Z
  be:	8e 6f       	ori	r24, 0xFE	; 254
  c0:	80 83       	st	Z, r24
	*ucsr0b &= ~(0x08);
  c2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
  c6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
  ca:	80 81       	ld	r24, Z
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	80 83       	st	Z, r24
	
	/*ativar o resistor pull-up na porta 1 c*/
	*pt_portc = *pt_portc | 0x01;
  d0:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <pt_portc>
  d4:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <pt_portc+0x1>
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
	*/
	int pressionado = 0, contador = 0, pressionando;

	/*Vetor display 
	Acionar os pinos que fazem os números de 0-9 se formarem no display de 7 segmentos*/
	char display[10] = {0x7E, 0x0C, 0xB6, 0x9E, 0xCC, 0xDA, 0xFA, 0x0E, 0xFE, 0XCE};
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	ec e0       	ldi	r30, 0x0C	; 12
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x52>
	
	/*Estado inicial*/
	*pt_portd = display[0];
  f0:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <pt_portd>
  f4:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <pt_portd+0x1>
  f8:	8e e7       	ldi	r24, 0x7E	; 126
  fa:	80 83       	st	Z, r24
	char mask_pinc = 0x01;
	
	/*Auxiliares
	Cuidado com as variáveis pressionado e pressionando - são diferentes!
	*/
	int pressionado = 0, contador = 0, pressionando;
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
		}
		
		/*Se o botão foi pressionado trocar o estado atual do pino de saída*/
		if(pressionado == 1){
			
			contador = (contador + 1)%10;
 100:	0a e0       	ldi	r16, 0x0A	; 10
 102:	10 e0       	ldi	r17, 0x00	; 0
	/*Estado inicial*/
	*pt_portd = display[0];
	
	while (1)
	{	/*Verificar se o botão foi pressionado*/
		if((*pt_pinc & mask_pinc) == 0){
 104:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <pt_pinc>
 108:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <pt_pinc+0x1>
 10c:	90 81       	ld	r25, Z
 10e:	90 fd       	sbrc	r25, 0
 110:	f9 cf       	rjmp	.-14     	; 0x104 <main+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	4f e9       	ldi	r20, 0x9F	; 159
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x82>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x8c>
 122:	00 00       	nop
			_delay_ms(500);
			if((*pt_pinc & mask_pinc) == 0){
 124:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <pt_pinc>
 128:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <pt_pinc+0x1>
 12c:	80 81       	ld	r24, Z
 12e:	80 fd       	sbrc	r24, 0
 130:	e9 cf       	rjmp	.-46     	; 0x104 <main+0x6e>
		}
		
		/*Se o botão foi pressionado trocar o estado atual do pino de saída*/
		if(pressionado == 1){
			
			contador = (contador + 1)%10;
 132:	c9 01       	movw	r24, r18
 134:	01 96       	adiw	r24, 0x01	; 1
 136:	b8 01       	movw	r22, r16
 138:	0e 94 bd 00 	call	0x17a	; 0x17a <__divmodhi4>
 13c:	9c 01       	movw	r18, r24
			*pt_portd = display[contador];
 13e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <pt_portd>
 142:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <pt_portd+0x1>
 146:	e1 e0       	ldi	r30, 0x01	; 1
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	ec 0f       	add	r30, r28
 14c:	fd 1f       	adc	r31, r29
 14e:	e8 0f       	add	r30, r24
 150:	f9 1f       	adc	r31, r25
 152:	80 81       	ld	r24, Z
 154:	8c 93       	st	X, r24
 156:	09 c0       	rjmp	.+18     	; 0x16a <main+0xd4>
 158:	4f e9       	ldi	r20, 0x9F	; 159
 15a:	86 e8       	ldi	r24, 0x86	; 134
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	41 50       	subi	r20, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xc8>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xd2>
 168:	00 00       	nop
			
		/*Não mudar o estado de pressionado caso o usuário estiver mantendo o botão pressionado*/	
		
			pressionando = 1;		
			while(pressionando == 1){
				if((*pt_pinc & mask_pinc) == 0x00){
 16a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <pt_pinc>
 16e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <pt_pinc+0x1>
 172:	90 81       	ld	r25, Z
 174:	90 ff       	sbrs	r25, 0
 176:	f0 cf       	rjmp	.-32     	; 0x158 <main+0xc2>
 178:	c5 cf       	rjmp	.-118    	; 0x104 <main+0x6e>

0000017a <__divmodhi4>:
 17a:	97 fb       	bst	r25, 7
 17c:	07 2e       	mov	r0, r23
 17e:	16 f4       	brtc	.+4      	; 0x184 <__divmodhi4+0xa>
 180:	00 94       	com	r0
 182:	07 d0       	rcall	.+14     	; 0x192 <__divmodhi4_neg1>
 184:	77 fd       	sbrc	r23, 7
 186:	09 d0       	rcall	.+18     	; 0x19a <__divmodhi4_neg2>
 188:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__udivmodhi4>
 18c:	07 fc       	sbrc	r0, 7
 18e:	05 d0       	rcall	.+10     	; 0x19a <__divmodhi4_neg2>
 190:	3e f4       	brtc	.+14     	; 0x1a0 <__divmodhi4_exit>

00000192 <__divmodhi4_neg1>:
 192:	90 95       	com	r25
 194:	81 95       	neg	r24
 196:	9f 4f       	sbci	r25, 0xFF	; 255
 198:	08 95       	ret

0000019a <__divmodhi4_neg2>:
 19a:	70 95       	com	r23
 19c:	61 95       	neg	r22
 19e:	7f 4f       	sbci	r23, 0xFF	; 255

000001a0 <__divmodhi4_exit>:
 1a0:	08 95       	ret

000001a2 <__udivmodhi4>:
 1a2:	aa 1b       	sub	r26, r26
 1a4:	bb 1b       	sub	r27, r27
 1a6:	51 e1       	ldi	r21, 0x11	; 17
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <__udivmodhi4_ep>

000001aa <__udivmodhi4_loop>:
 1aa:	aa 1f       	adc	r26, r26
 1ac:	bb 1f       	adc	r27, r27
 1ae:	a6 17       	cp	r26, r22
 1b0:	b7 07       	cpc	r27, r23
 1b2:	10 f0       	brcs	.+4      	; 0x1b8 <__udivmodhi4_ep>
 1b4:	a6 1b       	sub	r26, r22
 1b6:	b7 0b       	sbc	r27, r23

000001b8 <__udivmodhi4_ep>:
 1b8:	88 1f       	adc	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	5a 95       	dec	r21
 1be:	a9 f7       	brne	.-22     	; 0x1aa <__udivmodhi4_loop>
 1c0:	80 95       	com	r24
 1c2:	90 95       	com	r25
 1c4:	bc 01       	movw	r22, r24
 1c6:	cd 01       	movw	r24, r26
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
